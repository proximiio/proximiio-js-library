import { Observer } from '../eventable';
import BaseSource from '../components/map/sources/base_source';
import BaseLayer from '../components/map/layers/base_layer';
export default class StyleModel {
    _observers?: Observer[];
    id: string;
    organization_id: string;
    version: number;
    name: string;
    metadata: any;
    center: [number, number];
    zoom: number;
    bearing: number;
    pitch: number;
    sources: {
        [id: string]: any;
    };
    glyphs: string;
    layers: any[];
    overlay?: boolean;
    segments: boolean;
    routable: boolean;
    cluster: boolean;
    rooms: boolean;
    constructor(data: any);
    on(observer: Observer): void;
    off(observer: Observer): void;
    notify(event?: string, data?: any): void;
    getUniversalLayers(source: string): any[];
    getSyntheticLayers(): any[];
    usesPrefixes(): boolean;
    addLayer(layer: any, beforeLayer: string): void;
    getLayer(id: string): any;
    getLayerIndex(id: string): number;
    getLayers(sourceId: string): BaseLayer[];
    addSource(sourceId: string, source: any): void;
    removeLayer(id: string): void;
    getSources(): BaseSource[];
    setSource(id: string, data: BaseSource): void;
    getSource(sourceId: string): BaseSource;
    removeSource(sourceId: string): void;
    setLevel(level: number): void;
    get polygonEditing(): any;
    toggleCluster(): void;
    togglePolygonEditing(): void;
    toggleRooms(): void;
    toggleOverlay(): void;
    toggleSegments(): void;
    toggleRoutable(): void;
    togglePaths(enabled: boolean): void;
    updateLayer(layer: BaseLayer): void;
    setMetadata(namespace: string, item: string, value: any): void;
    get namespaces(): string[];
    namespaceItems(namespace: string): string[];
    get json(): any;
    hideIconLayers(): void;
    showIconLayers(): void;
}
